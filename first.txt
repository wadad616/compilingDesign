Program ::= ProgramHead DeclarePart ProgramBody                                           [PROGRAM]
ProgramHead ::= PROGRAM ProgramName                                                       [PROGRAM]
ProgramName ::= ID                                                                        [ID]
DeclarePart ::= TypeDec VarDec ProcDec                                                    [PROCEDURE, $, VAR, TYPE]
TypeDec ::= $                                                                             [$]
TypeDec ::= TypeDeclaration                                                               [TYPE]
TypeDeclaration ::= TYPE TypeDecList                                                      [TYPE]
TypeDecList ::= TypeId = TypeName ; TypeDecMore                                           [ID]
TypeDecMore ::= $                                                                         [$]
TypeDecMore ::= TypeDecList                                                               [ID]
TypeId ::= ID                                                                             [ID]
TypeName ::= BaseType                                                                     [CHAR, INTEGER]
TypeName ::= StructureType                                                                [ARRAY, RECORD]
TypeName ::= ID                                                                           [ID]
BaseType ::= INTEGER                                                                      [INTEGER]
BaseType ::= CHAR                                                                         [CHAR]
StructureType ::= ArrayType                                                               [ARRAY]
StructureType ::= RecType                                                                 [RECORD]
ArrayType ::= ARRAY [ Low .. Top ] OF BaseType                                            [ARRAY]
Low ::= INTC                                                                              [INTC]
Top ::= INTC                                                                              [INTC]
RecType ::= RECORD FieldDecList END                                                       [RECORD]
FieldDecList ::= BaseType IdList ; FieldDecMore                                           [CHAR, INTEGER]
FieldDecList ::= ArrayType IdList ; FieldDecMore                                          [ARRAY]
FieldDecMore ::= $                                                                        [$]
FieldDecMore ::= FieldDecList                                                             [ARRAY, CHAR, INTEGER]
IdList ::= ID IdMore                                                                      [ID]
IdMore ::= $                                                                              [$]
IdMore ::= , IdList                                                                       [,]
VarDec ::= $                                                                              [$]
VarDec ::= VarDeclaration                                                                 [VAR]
VarDeclaration ::= VAR VarDecList                                                         [VAR]
VarDecList ::= TypeName VarIdList ; VarDecMore                                            [ARRAY, RECORD, CHAR, ID, INTEGER]
VarDecMore ::= $                                                                          [$]
VarDecMore ::= VarDecList                                                                 [ARRAY, RECORD, CHAR, ID, INTEGER]
VarIdList ::= ID VarIdMore                                                                [ID]
VarIdMore ::= $                                                                           [$]
VarIdMore ::= , VarIdList                                                                 [,]
ProcDec ::= $                                                                             [$]
ProcDec ::= ProcDeclaration                                                               [PROCEDURE]
ProcDeclaration ::= PROCEDURE ProcName ( ParamList ) ; ProcDecPart ProcBody ProcDecMore   [PROCEDURE]
ProcDecMore ::= $                                                                         [$]
ProcDecMore ::= ProcDeclaration                                                           [PROCEDURE]
ProcName ::= ID                                                                           [ID]
ParamList ::= $                                                                           [$]
ParamList ::= ParamDecList                                                                [ARRAY, VAR, RECORD, CHAR, ID, INTEGER]
ParamDecList ::= Param ParamMore                                                          [ARRAY, VAR, RECORD, CHAR, ID, INTEGER]
ParamMore ::= $                                                                           [$]
ParamMore ::= ; ParamDecList                                                              [;]
Param ::= TypeName FormList                                                               [ARRAY, RECORD, CHAR, ID, INTEGER]
Param ::= VAR TypeName FormList                                                           [VAR]
FormList ::= ID FidMore                                                                   [ID]
FidMore ::= $                                                                             [$]
FidMore ::= , FormList                                                                    [,]
ProcDecPart ::= DeclarePart                                                               [PROCEDURE, $, VAR, TYPE]
ProcBody ::= ProgramBody                                                                  [BEGIN]
ProgramBody ::= BEGIN StmList END                                                         [BEGIN]
StmList ::= Stm StmMore                                                                   [READ, RETURN, WHILE, ID, IF, WRITE]
StmMore ::= $                                                                             [$]
StmMore ::= ; StmList                                                                     [;]
Stm ::= ConditionalStm                                                                    [IF]
Stm ::= LoopStm                                                                           [WHILE]
Stm ::= InputStm                                                                          [READ]
Stm ::= OutputStm                                                                         [WRITE]
Stm ::= ReturnStm                                                                         [RETURN]
Stm ::= ID AssCall                                                                        [ID]
AssCall ::= AssignmentRest                                                                [:=, $, [, .]
AssCall ::= CallStmRest                                                                   [(]
AssignmentRest ::= VariMore := Exp                                                        [:=, [, .]
ConditionalStm ::= IF RelExp THEN StmList ELSE StmList FI                                 [IF]
LoopStm ::= WHILE RelExp DO StmList ENDWH                                                 [WHILE]
InputStm ::= READ ( Invar )                                                               [READ]
Invar ::= ID                                                                              [ID]
OutputStm ::= WRITE ( Exp )                                                               [WRITE]
ReturnStm ::= RETURN ( Exp )                                                              [RETURN]
CallStmRest ::= ( ActParamList )                                                          [(]
ActParamList ::= $                                                                        [$]
ActParamList ::= Exp ActParamMore                                                         [INTC, (, ID]
ActParamMore ::= $                                                                        [$]
ActParamMore ::= , ActParamList                                                           [,]
RelExp ::= Exp OtherRelE                                                                  [INTC, (, ID]
OtherRelE ::= CmpOp Exp                                                                   [<, =]
Exp ::= Term OtherTerm                                                                    [INTC, (, ID]
OtherTerm ::= $                                                                           [$]
OtherTerm ::= AddOp Exp                                                                   [+, -]
Term ::= Factor OtherFactor                                                               [INTC, (, ID]
OtherFactor ::= $                                                                         [$]
OtherFactor ::= MultOp Term                                                               [*, /]
Factor ::= ( Exp )                                                                        [(]
Factor ::= INTC                                                                           [INTC]
Factor ::= Variable                                                                       [ID]
Variable ::= ID VariMore                                                                  [ID]
VariMore ::= $                                                                            [$]
VariMore ::= [ Exp ]                                                                      [[]
VariMore ::= . FieldVar                                                                   [.]
FieldVar ::= ID FieldVarMore                                                              [ID]
FieldVarMore ::= $                                                                        [$]
FieldVarMore ::= [ Exp ]                                                                  [[]
CmpOp ::= <                                                                               [<]
CmpOp ::= =                                                                               [=]
AddOp ::= +                                                                               [+]
AddOp ::= -                                                                               [-]
MultOp ::= *                                                                              [*]
MultOp ::= /                                                                              [/]
